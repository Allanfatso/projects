CREATE VIEW STUDENT_DETAILS AS
SELECT STUDENT.STUDENTNO, STUDENTNAME, STUDENTINITIALS, GENDER, DOB, EMAIL,
RESULTS.MODULENO, RESULTS.ACADEMICYEAR, RESULTS.SEMESTER, RESULTS.OVERALLMARK, RESULTS.STATUS FROM RESULTS
INNER JOIN STUDENT ON (STUDENT.STUDENTNO = RESULTS.STUDENTNO)
WHERE STUDENT.STUDENTNO IN (SELECT STUDENTNO FROM RESULTS);




INSERT INTO STUDENT_DETAILS VALUES
	('2000220', 'Garfield', 'Gb', 'M', '02/DEC/2001', 'g.abel@sun.ac.uk', '120919', '2022/23', 'SEM1', '79', '');
INSERT INTO STUDENT VALUES
	('2070331', 'In', 'Isaac', 'M', '01/OCT/1999', 'i.newton@sun.ac.uk');
INSERT INTO STUDENT VALUES
	('2050724', 'Gb', 'Gabby', 'F', '03/SEP/2001', 'Gabrielle@sun.ac.uk');
INSERT INTO STUDENT VALUES
	('2010224', 'Ag', 'Angel', 'F', '04/OCT/2002', 'Angelica@sun.ac.uk');
INSERT INTO STUDENT VALUES
	('2001890', 'Al', 'Alan', 'M', '05/AUG/2000', 'Alan@sun.ac.uk');
INSERT INTO STUDENT VALUES
	('2004890', 'ZI', 'Zizo', 'M', '05/AUG/2001', 'zizo@sun.ac.uk');

4)Developing and testing a view:
a. Develop a view that shows all the students details along with their module
results (moduleNo, academic year, semester, overall mark and status
only). Do not include students who have not taken any modules yet. Show
the view definition and display the contents of the view. You do not need
to include any other details.
The view MUST involve a join. This join MUST be of only two tables.

CREATE TABLE STUDENT(
	studentNo NUMBER(7) PRIMARY KEY,
	studentInitials VARCHAR2(3) NOT NULL,
	studentName VARCHAR2(25) NOT NULL,
	gender VARCHAR2(1) NOT NULL check ((gender like 'F' OR gender like 'M')),
	dob DATE NOT NULL,
	email VARCHAR(25) NOT NULL CHECK (email like '%@sun.ac.uk')
);

CREATE TABLE RESULTS(
	AcademicYear VARCHAR(7),
	Semester VARCHAR(4) CHECK (Semester like 'SEM%' or Semester = 'Resit'),
	moduleNo VARCHAR2(6),
	studentNo NUMBER(7),
	component1Result Number(3) Not Null CHECK ((component1Result < 100) or (component1Result = 100)),
	component1Weighting Number(3) Not Null CHECK ((component1Weighting < 100) or (component1Weighting = 100)),
	component2Result Number(3) CHECK ((component2Result < 100) or (component2Result = 100)),
	component2Weighting Number(3) CHECK (component2Weighting < 100),
	overallMark Number(3) NOT NULL,
	status VARCHAR(5) NOT NULL,
	comments VARCHAR(20), 
	FOREIGN KEY (moduleNo) REFERENCES MODULE(moduleNo),
	FOREIGN KEY (studentNo) REFERENCES STUDENT(studentNo),
	Constraint Comp_key PRIMARY KEY (Semester, AcademicYear, moduleNo, studentNo)
);

CREATE TABLE REGISTRATION(
	studentNo NUMBER(7),
	courseCode VARCHAR(5),
	modes VARCHAR(2) NOT NULL,
	status VARCHAR(1) NOT NULL,
	startDate DATE NOT NULL,
	courseResult VARCHAR(25),
	FOREIGN KEY (studentNo) REFERENCES STUDENT(studentNo),
	FOREIGN KEY (courseCode) REFERENCES COURSE(courseCode),
	Constraint Composite PRIMARY KEY (studentNo, courseCode)
);